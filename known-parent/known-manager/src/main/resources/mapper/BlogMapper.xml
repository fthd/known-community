<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.known.manager.mapper.BlogMapper" >
  <resultMap id="BaseResultMap" type="com.known.common.model.Blog" >
    <id column="blog_id" property="blogId" jdbcType="INTEGER" />
    <result column="category_id" property="categoryId" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="summary" property="summary" jdbcType="VARCHAR" />
    <result column="blog_image" property="blogImage" jdbcType="VARCHAR" />
    <result column="blog_image_thum" property="blogImageThum" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_icon" property="userIcon" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="comment_count" property="commentCount" jdbcType="INTEGER" />
    <result column="read_count" property="readCount" jdbcType="INTEGER" />
    <result column="collection_count" property="collectionCount" jdbcType="INTEGER" />
    <result column="like_count" property="likeCount" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" typeHandler="com.known.manager.handler.BlogStatusHandler"/>
  </resultMap>

<sql id="Base_Condition" >
    <where >
    	<if test="blogId!=null and blogId!=''">
    		and blog_id = #{blogId}
    	</if>
    	<if test="title!=null and title!=''">
    		and title like '%${title}%'
    	</if>
    	<if test="userId!=null and userId!=''">
    		and b.user_id = #{userId}
    	</if>
    	<if test="categoryId!=null and categoryId!=''">
    		and b.category_id = #{categoryId}
    	</if>
    	<if test="null != status">
    		and status = #{status.type}
    	</if>
    	<if test="null!= startDate and ''!= startDate">
     		<![CDATA[ 
     				and create_time >= STR_TO_DATE('${startDate} 00:00:00','%Y-%m-%d %H:%i:%s')
     				]]>
     	</if>
     	 <if test="null!= endDate and ''!= endDate">
     		<![CDATA[ 
     				and create_time <= STR_TO_DATE('${endDate} 23:59:59', '%Y-%m-%d %H:%i:%s')		
     				]]>
     	</if>
    </where>
  </sql>  
    
  <sql id="Base_Column_List" >
    blog_id, b.category_id, title, name, content, summary, blog_image, blog_image_thum, b.user_id, user_icon, user_name, create_time, comment_count, 
    read_count, collection_count, like_count, status
  </sql>
   
   	 <select id="selectCount" resultType="java.lang.Integer">
	  		select count(1) from known_blog b <include refid="Base_Condition"/>
	  </select>
   
   <select id="selectList" resultMap="BaseResultMap">
   		select <include refid="Base_Column_List"/> 
   		<if test="showContent">
		  		 ,content
		 </if>
		 from known_blog b left join known_blog_category c on c.category_id = b.category_id
		 <include refid="Base_Condition"/>
		 	<if test="null!= orderBy">
	     		order by ${orderBy.orderBy}
	     	</if>
	  		<if test="null!= page">
	     		limit #{page.start},#{page.end}
	     	</if>
   </select>
  
  <delete id="delete" >
    delete from known_blog
   	where blog_id=#{blogId}
  </delete>
  
  <insert id="insert" parameterType="com.known.common.model.Blog" >
	<selectKey keyProperty="blogId" resultType="java.lang.Integer" order="AFTER">
  		SELECT LAST_INSERT_ID()
  	</selectKey>
    insert into known_blog (category_id, title, 
      user_id, user_icon, user_name, 
      create_time, comment_count, read_count, 
      collection_count, like_count, status, 
      content, summary, blog_image, 
      blog_image_thum)
    values (#{categoryId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{userIcon,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{commentCount,jdbcType=INTEGER}, #{readCount,jdbcType=INTEGER}, 
      #{collectionCount,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, #{status.type,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR}, #{summary,jdbcType=LONGVARCHAR}, #{blogImage,jdbcType=LONGVARCHAR}, 
      #{blogImageThum,jdbcType=LONGVARCHAR})
  </insert>
  
  
  <update id="update" parameterType="com.known.common.model.Blog" >
    update known_blog
    <set >
      <if test="categoryId != null" >
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userIcon != null" >
        user_icon = #{userIcon,jdbcType=VARCHAR},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status.type,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="summary != null" >
        summary = #{summary,jdbcType=LONGVARCHAR},
      </if>
      <if test="blogImage != null" >
        blog_image = #{blogImage,jdbcType=LONGVARCHAR},
      </if>
      <if test="blogImageThum != null" >
        blog_image_thum = #{blogImageThum,jdbcType=LONGVARCHAR},
      </if>
    </set>
	  	where blog_id=#{blogId}
  </update>

  	<update id="updateInfoCount" >
	    update known_blog
	    <set>
	    		<if test="addReadCount">
	    				read_count = read_count + 1
	    		</if>
	    		<if test="addLikeCount">
	    				like_count = like_count + 1
	    		</if>
	    		<if test="addCommentCount">
	    				comment_count = comment_count + 1
	    		</if>
	    		<if test="addCollectionCount">
	    				collection_count = collection_count + 1
	    		</if>
	    </set>
	    where blog_id = #{articleId}
	</update>

</mapper>